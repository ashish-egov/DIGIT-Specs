openapi: 3.0.1
info:
  title: PDF-Service APIs
  description: |
    APIs available in PDF-Service
  contact:
    name: eGovernments Foundation
  version: 1.1.0
servers:
- url: /pdf-service/v1/
paths:
  /_create:
    post:
      tags:
      - PDF-Service endpoints
      summary: Generate PDF and store output pdfs to filestore and return their filestoreids.
        The information is also saved into DB so that using _search endpoint we can
        retrieve already generated pdfs.
      description: Generate pdfs and return their filestoreids
      parameters:
      - name: tenantId
        in: query
        description: tenantId for pdf
        required: true
        schema:
          type: string
      - name: key
        in: query
        description: key to identify correct PDF configurarion
        required: true
        schema:
          type: string
      requestBody:
        description: requestinfo object with input json for pdf
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PDFRequest'
        required: false
      responses:
        201:
          description: PDF successfully created and response sent back
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PDFResponse'
        400:
          description: Incorrect request
          content: {}
        404:
          description: PDF with search parameters was not found
          content: {}
        500:
          description: Error happened at server
          content: {}
      x-codegen-request-body-name: requestbody
  /_createnosave:
    post:
      tags:
      - PDF-Service endpoints
      summary: Generates pdf without storing any information on filestore or in DB.
        The generated pdf would be returned as binary response
      description: Generate pdf and return as binary response
      parameters:
      - name: tenantId
        in: query
        description: tenantId for pdf
        required: true
        schema:
          type: string
      - name: key
        in: query
        description: key to identify correct PDF configurarion
        required: true
        schema:
          type: string
      requestBody:
        description: requestinfo object with input json for pdf
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PDFRequest'
        required: false
      responses:
        201:
          description: PDF created and returned in binary
          content: {}
        400:
          description: If correct request not sent
          content: {}
        500:
          description: Error occurred at server
          content: {}
      x-codegen-request-body-name: requestbody
  /_search:
    post:
      tags:
      - PDF-Service endpoints
      summary: Get filestoreids and other information about already generated pdf
        by searching on jobid or entityid with other optional search parameters
      description: Get details for already generated PDF
      parameters:
      - name: tenantid
        in: query
        description: tenantId for pdf
        schema:
          type: string
      - name: jobid
        in: query
        description: search based on unique id of pdf job.
        required: true
        schema:
          type: string
      - name: entityid
        in: query
        description: search based on unique id of a document
        required: true
        schema:
          type: string
      - name: isconsolidated
        in: query
        description: Whether single object or multiobject pdf required
        schema:
          type: string
      requestBody:
        description: requestinfo object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RequestInfo'
        required: false
      responses:
        200:
          description: Pdf information successfully retrieved
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PDFResponse'
        400:
          description: Incorrect request
          content: {}
        404:
          description: PDF with search parameters was not found
          content: {}
        500:
          description: Error happened at server
          content: {}
      x-codegen-request-body-name: requestInfo
components:
  schemas:
    PDFResponse:
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/ResponseInfo'
        message:
          type: string
        filestoreIds:
          type: array
          description: filestoreids of PDFs from filestore service
          items:
            type: string
        jobid:
          type: string
          description: jobid of pdf create reques
        createdtime:
          type: number
          description: start time of job
        endtime:
          type: number
          description: end time of job
        tenantid:
          type: string
        totalcount:
          type: number
        key:
          type: string
          description: key to be used to pick pdf configs
        documentType:
          type: string
          description: documentype defined in pdf config
        moduleName:
          type: string
          description: modulename defined in pdf config
    Role:
      required:
      - code
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique id of the role
        name:
          type: string
          description: Unique name of the role
        code:
          type: string
          description: code assigned for a particular tenant - array of role codes/names
    User:
      required:
      - emailId
      - id
      - mobileNumber
      - name
      - roles
      - tenantId
      - type
      - userName
      - uuid
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: User id of the authenticated user. Will be deprecated in future
        userName:
          type: string
          description: Unique user name of the authenticated user
        name:
          type: string
          description: Name of the user.
        type:
          type: string
        mobileNumber:
          type: string
          description: mobile number of the autheticated user
        emailId:
          type: string
          description: email address of the authenticated user
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Role'
          description: User role carries the tenant related role information for the user. A user can have multiple roles per tenant based on the need of the tenant. A user may also have multiple roles for multiple tenants.
        tenantId:
          type: string
          description: Unique Identifier of the tenant to which user primarily belongs
        uuid:
          type: string
          description: Unique UUid generated for authenticated user. 
    ResponseInfo:
      type: object
      properties:
        apiId:
          type: string
          description: unique id for api request
        ver:
          type: string
          description: API version - for HTTP based request this will be same as used
        ts:
          type: number
          description: time in epoch
        resMsgId:
          type: string
          description: unique response message id (UUID) - will usually be the correlation
            id from the server
        msgId:
          type: string
          description: message id of the request
        status:
          type: string
          description: status of request processing - to be enhanced in futuer to
            include INPROGRESS
        correlationId:
          type: string
          description: RequestInfo should be used to carry meta information about the requests to the server as described in the fields below. All eGov APIs will use requestinfo as a part of the request body to carry this meta information. Some of this information will be returned back from the server as part of the ResponseInfo in the response body to ensure correlation.
        userInfo:
          $ref: '#/components/schemas/User'
    RequestInfo:
      required:
      - action
      - apiId
      - authToken
      - correlationId
      - did
      - key
      - msgId
      - ts
      - userInfo
      - ver
      type: object
      properties:
        apiId:
          type: string
          description: unique id for api request
        ver:
          type: string
          description: API version - for HTTP based request this will be same as used
        ts:
          type: integer
          format: int64
          description: time in epoch
        action:
          type: string
          description: API action to be performed like _create, _update, _search (denoting
            POST, PUT, GET) or _oauth etc
        did:
          type: string
          description: Device ID from which the API is called
        key:
          type: string
          description: API key (API key provided to the caller in case of server to
            server communication)
        msgId:
          type: string
          description: Unique request message id from the caller
        authToken:
          type: string
          description: //session/jwt/saml token/oauth token - the usual value that
            would go into HTTP bearer token
        correlationId:
          type: string
          description: RequestInfo should be used to carry meta information about the requests to the server as described in the fields below. All eGov APIs will use requestinfo as a part of the request body to carry this meta information. Some of this information will be returned back from the server as part of the ResponseInfo in the response body to ensure correlation.
        userInfo:
          $ref: '#/components/schemas/User'
    PDFRequest:
      type: object
      properties:
        ResponseInfo:
          $ref: '#/components/schemas/RequestInfo'
        moduleObjectWithName:
          type: object
          properties: {}